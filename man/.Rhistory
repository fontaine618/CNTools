}
seg2RS <- function(segData, by = c("region", "gene", "pair"), 
    input = TRUE, XY = FALSE){
  by <- match.arg(by)
  if(!XY){
    seg <- segList(segData)
    segList(segData) <- seg[which(!seg[, "chrom"] 
        %in% c("X", "Y", "x", "y")),]
  }
  rs <- switch(by,
   region = getCommonSegValues(segList(segData), 
                   drop = TRUE),
               gene = collapseSegList(segList(segData)),
               pair = getPairwise(segList(segData)))
  if(input & by != "pair"){
     rs <- convertRS(rs, sampleStart = ifelse(by == "region", 4, 6)) 
  }
  return(RS(rs, by))
}
## segList - "output" of CBS
## drop - drop reduced segments with all NAs
## by - column name for chromosome
getCommonSegValues <- function(segList, by = "chrom", drop = FALSE){
  splited <- split.data.frame(segList, factor(segList[, by]))
  cat("Processing samples ...")
  segsByChroms <- lapply(splited, findOverlapingSegs)
  matchedSegs <- lapply(segsByChroms, matchSegValues, segList = segList)
  segWithValues <- do.call("rbind", args = matchedSegs)
  if(drop){
    toKeep <- apply(segWithValues[, 4:ncol(segWithValues)], 1,
                  FUN = function(x) !all(is.na(x)))
    segWithValues <- segWithValues[toKeep, ]
  }
  cat(" Done\n")
  return(sortByChromNLoc(segWithValues, by1 = "chrom", by2 = "start"))
}
findOverlapingSegs <- function(segListByChrom){
  breakPoints <- sort(unique(c(as.numeric(
                     as.vector(segListByChrom[, "loc.start"])),
                     as.numeric(as.vector(segListByChrom[, "loc.end"])))))
  newSegs <- cbind(c(breakPoints[1], breakPoints[2:(length(breakPoints) - 1)]
                     + 1), breakPoints[2:length(breakPoints)])
  newSegs <- cbind(as.vector(segListByChrom[1, "chrom"]), newSegs)
  colnames(newSegs) <- c("chrom", "start", "end")
  return(newSegs)
}
# segsByChrom - ouput of the function findOverLapingSegs
matchSegValues <- function(segsByChrom, segList){
  getSegValues <- function(segData){
    mappedSegs[as.numeric(mappedSegs[, "start"]) >=
               as.numeric(segData["loc.start"]) &
               as.numeric(mappedSegs[, "end"]) <=
               as.numeric(segData["loc.end"]),
               which(as.character(colnames(mappedSegs)) ==
                     as.character(segData["ID"]))
               ] <<- as.numeric(segData["seg.mean"])
  }
  mappedSegs <- cbind(segsByChrom,
                      matrix(NA, ncol = length(unique(segList[, "ID"])),
                             nrow = nrow(segsByChrom)))
  colnames(mappedSegs) <- c(colnames(segsByChrom),
                            as.vector(unique(segList[, "ID"])))
  # only keeps the segements within a given chromosome
  tempSegList <- segList[segList[, "chrom"] == segsByChrom[1, "chrom"], ]
  junk <- apply(tempSegList, 1, getSegValues)  
  return(mappedSegs)
}
# Sort mapped in order by chromsome and then by location
# A data frame or matrix to be sorted by columns defined by by1 and by2
sortByChromNLoc <- function(sortMe, by1 = "Ch", by2 = "Pos"){
  splited <- split.data.frame(sortMe, factor(sortMe[, by1]))
  sorted <- NULL
  for(chrom in c(1:22, "X", "Y")){
    if(!is.null(splited[[chrom]])){
      sorted <- rbind(sorted,
              splited[[chrom]][order(as.numeric(splited[[chrom]][, by2])), ])
    }
  }
  return(sorted)
}
convertRS <- function(rs, sampleStart = 4){
  splited <- split.data.frame(rs, factor(rs[, "chrom"]))
  splited <- lapply(splited, convertNAByChrom, sampleStart = sampleStart)
  return(do.call("rbind", args = splited))  
}
convertNAByChrom <- function(rsByChrom, sampleStart = 4, 
                             loc = 2){
  rsByChrom <- rsByChrom[order(as.numeric(rsByChrom[, loc])), ] 
  converted <- apply(rsByChrom[, sampleStart:ncol(rsByChrom)], 2, convertNA)
  return(cbind(rsByChrom[, 1:(sampleStart - 1)], converted))
}
convertNA <- function(convertMe){
  while(length(toConvert <- which(is.na(convertMe))) > 0){
    for(index in toConvert){
      if(index == 1){
        convertMe[index] <- convertMe[index + 1]
        next
      }
      if(index == length(convertMe)){
        convertMe[index] <- convertMe[index - 1]
        next
      }
      temp <- convertMe[c(index + 1, index - 1)]
      temp <- temp[!is.na(temp)]
      if(length(temp) == 0){
        next
      }else{
        convertMe[index] <- min(as.numeric(temp))
      }
    }
  }
  return(convertMe)
}
collapseSegList <- function(segList){
  splited <- split.data.frame(segList, factor(segList[, "ID"]))
  #data(geneInfo)
  template <- geneInfo
  rownames(template) <- template[, "geneid"]
  cat("\nProcessing samples .")
  for(sp in names(splited)){
    cat(".")
    template <- cbind(template, rep(NA, nrow(template)))
    colnames(template) <- c(colnames(template)[-length(colnames(template))], 
                            sp)
    filled <- getSegMeanByGene(splited[[sp]], geneInfo)
    template[as.character(filled[, "geneid"]), sp] <- 
                            as.numeric(filled[, "seg.mean"])
  }
  cat(" Done\n")
  return(template[apply(template[, 7:ncol(template)], 1, 
                  FUN = function(x) !all(is.na(x))), ])
}
# Maps chromosomal regions to genes
# segList - output of CBS 
# geneInfo - a matrix or data frame with the following columns:
#            chrom, star, end, geneName, entrezID.
#
getSegMeanByGene <- function (sampleSeg, geneInfo) {
  mapMCA <- function(x){
    found <- geneInfo[as.character(geneInfo[, "chrom"]) ==
                     as.character(x["chrom"]) &
                     as.numeric(geneInfo[, "end"]) > 
                     as.numeric(x["loc.start"]) & 
                     as.numeric(geneInfo[, "start"]) < 
                     as.numeric(x["loc.end"]), , drop = FALSE]
    if(nrow(found) == 0){
      #return(matrix(c(id = NA, x[c("chrom", "loc.start", "loc.end")], 
      #    geneName = NA, entrezID = NA, x["seg.mean"]), nrow = 1, 
      #     dimnames = list(NULL, c("chrom", "start", "end", "geneName",
      #                     "entrezID", "seg.mean"))))
      return(NA)
    }
    return(cbind(found, seg.mean = x["seg.mean"]))
  }
  sampleSeg[, "loc.start"] <- gsub(" ", "", sampleSeg[, "loc.start"])
  sampleSeg[, "loc.end"] <- gsub(" ", "", sampleSeg[, "loc.end"])
  mapped <- do.call("rbind", args = apply(sampleSeg, 1, mapMCA))
  return(collapseDupGenes(mapped[!is.na(mapped[, "geneid"]), ]))
}
collapseDupGenes <- function(mapped){
  if(any(duplicated(mapped[, "geneid"]))){
      dups <- mapped[mapped[, "geneid"] %in% 
          mapped[which(duplicated(mapped[, "geneid"])), 
          "geneid"], c("geneid", "seg.mean")]
      dups <- split.data.frame(dups, factor(dups[, "geneid"])) 
      dups <- sapply(dups, FUN = function(x){
            x <- as.matrix(x)
            temp <- as.numeric(x[which(abs(as.numeric(x[, "seg.mean"])) 
                == max(abs(as.numeric(x[, "seg.mean"])))), "seg.mean"])
            return(temp[1])
          })
      mapped <- as.matrix(mapped[!duplicated(mapped[, "geneid"]), ])
      rownames(mapped) <- mapped[, "geneid"]
      mapped[as.character(names(dups)), "seg.mean"] <- as.numeric(dups)
  }
  return(mapped)
}
getPairwise <- function(segList){
    rsList <- list()
    uniqueSamples <- unique(segList[, "ID"])
    for(i in 1:(length(uniqueSamples) -1)){ 
        for(j in (i + 1):length(uniqueSamples)){ 
            rs <- getCommonSegValues(segList[which(segList[, "ID"] %in% 
          c(uniqueSamples[i], uniqueSamples[j])), ], drop = TRUE)
            rs <- rs[!(is.na(rs[, uniqueSamples[i]]) | 
               is.na(rs[, uniqueSamples[j]])), ] 
            rsList[[paste(i, j, sep = "")]] <- rs[, -c(1:3)]
        }
    }
    return(rsList)
}
getPairDist <- function(pairList, method = "euclidean", diag = FALSE,
    upper = FALSE, p = 2){
    pair2Dist <- function(pair){
      tempDis <- dist(t(pair), 
        method = METHODS[method], diag = diag, upper = upper, p = 2)
      d[colnames(pair)[2], colnames(pair)[1]]  <<- tempDis
      d[colnames(pair)[1], colnames(pair)[2]] <<- tempDis
      return(invisible())
    }
    if (!is.na(pmatch(method, "euclidian"))) 
        method <- "euclidean"
    METHODS <- c("euclidean", "maximum", "manhattan", "canberra", 
        "binary", "minkowski")
    method <- pmatch(method, METHODS)
    if (is.na(method)) 
        stop("invalid distance method")
    if (method == -1) 
        stop("ambiguous distance method")
    sNames <- unique(unlist(lapply(pairList, 
        FUN = function(x) return(colnames(x)))))
    d <- matrix(data = 1, nrow = length(sNames), ncol = length(sNames), 
        dimnames = list(row = sNames, col = sNames))
    sapply(pairList, pair2Dist)
    return(as.dist(d))
}
getPairCor <- function(pairList, use = "everything", 
    method = c("pearson", "kendall", "spearman")){
    pair2Cor <- function(pair){
      tempCor <- cor(pair[, 1], pair[, 2], use = use, method = method)
      co[colnames(pair)[2], colnames(pair)[1]]  <<- tempCor
      co[colnames(pair)[1], colnames(pair)[2]] <<- tempCor
      return(invisible())
    }
    sNames <- unique(unlist(lapply(pairList, 
        FUN = function(x) return(colnames(x)))))
    co <- matrix(data = 1, nrow = length(sNames), ncol = length(sNames), 
        dimnames = list(row = sNames, col = sNames))
    junk <- sapply(pairList, pair2Cor)
    return(co)
}
filterPair <- function(rsObj, flist){
  tempPair <- lapply(rs(rsObj), FUN = function(x) x[genefilter(x, flist), ])
  return(RS(rs = tempPair, by = segBy(rsObj)))  
}
filterRS <- function(rsObj, flist){
    if(segBy(rsObj) == "region"){
        drop <- 1:3
    }else{
        drop <- 1:5
    }
    tempRS <- rs(rsObj)
    return(RS(rs = rs(rsObj)[genefilter(tempRS[, -drop], flist), ], 
       by = segBy(rsObj)))
}
sList <- readt.table("Z:/Tasks/OV/B9_12TumorSegList.tsv", sep = "\t", header = TRUE, as.is = TRUE)
sList <- read.table("Z:/Tasks/OV/B9_12TumorSegList.tsv", sep = "\t", header = TRUE, as.is = TRUE)
cnseg <- CNSeg(sList)
cnseg
pairSeg <- RS(cnseg, by = "pair")
pairSeg
length(rs(pairSeg))
rs(pairSeg)
pairSeg <- getRS(cnseg, by = "pair", input = FALSE, XY = FALSE)
library(genefilter)
ls("package:genefilter")
?varFilter
allNA
kOverA
genefilter
diffBy <- function(marging = 0.1){
    function(x){
        abs(as.numeric(x[1]) - as.numeric(x[2])) >= 0.1
    }
}
diffy(-2)
diffby(-2)
diffBy(-2)
diffBy <- function(marging = 0.1){
    function(x){
        abs(as.numeric(x[1]) - as.numeric(x[2])) >= marging
    }
}
?genefilter
ls()
exp <- rs(pairSeg)[[1]]
pairSeg
flist <- filterfun(diffBy(-1))
flist
filtered <- genefilter(pairSeg, flist)
setGeneric("genefilter", function(expr, flist)
           standardGeneric("genefilter"))
setMethod("genefilter", "RS",
          function(expr, flist){
            if(segBy(expr) == "pair"){
              return(filterPair(expr, flist))
            }else{
              return(filterRS(expr, flist))
            }
          })
setGeneric("rs", function(object)
           standardGeneric("rs"))
setMethod("rs", "RS", 
          function(object) object@rs)
 filtered <- genefilter(pairSeg, flist)
?genefilter
set.seed(-1)
   f1 <- kOverA(5, 10)
   flist <- filterfun(f1, allNA)
   exprA <- matrix(rnorm(1000, 10), ncol = 10)
class(exprA)
ans <- genefilter(exprA, flist)
ans <- genefilter:::genefilter(exprA, flist)
?dist
filterPair <- function(rsObj, flist){
  tempPair <- lapply(rs(rsObj), FUN = function(x) 
      x[genefilter:::genefilter(x, flist), ])
  return(RS(rs = tempPair, by = segBy(rsObj)))  
}
filtered <- genefilter(pairSeg, flist)
debug(filterPair)
filtered <- genefilter(pairSeg, flist)
x <- rs(rsObj)[[1]]
head(x)
k <- genefilter:::genefilter(x, flist)
head(k)
table(k)
flist
Q
flist <- filterfun(diffBy(0.1))
flist
filtered <- genefilter(pairSeg, flist)
x <- rs(rsObj)[[1]]
head(x)
f <- genefilter:::genefilter(x, flist)
head(f)
table(f)
filtered
d <- dist(filtered)
plot(hclust(d))
d
class(d)
names9dist)
names(d)
head(sList)
sList[, "ID"] <- gsub(".*CGCC_("TCGA\\.[0-9]+\\.[0-9]+\\.[0-9A-Z]+\\.[0-9]{2}).*", "\\1", sList[, "ID])
unique(gsub(".*CGCC_(TCGA\\.[0-9]+\\.[0-9]+\\.[0-9A-Z]+\\.[0-9]{2}).*", "\\1", sList[, "ID]))
)
unique(gsub(".*CGCC_(TCGA\\.[0-9]+\\.[0-9]+\\.[0-9A-Z]+\\.[0-9]{2}).*", "\\1", sList[, "ID"]))
unique(gsub("D$", "", gsub(".*CGCC_(TCGA\\.[0-9]+\\.[0-9]+\\.[0-9A-Z]+\\.[0-9]{2}).*", "\\1", sList[, "ID"])))
sList[, "ID"] <- gsub("D$", "", gsub(".*CGCC_(TCGA\\.[0-9]+\\.[0-9]+\\.[0-9A-Z]+\\.[0-9]{2}).*", "\\1", sList[, "ID"]))
rsPair <- getRS(CNSeg(sList), by = "pair")
rsPair <- getRS(CNSeg(sList), by = "pair", input = FALSE, XY = FALSE)
filtered <- genefilter(rsPair, flist)
c
d <- dist(filtered)
plot(hclust(d))
plot(hclust(d), cex = 0.5)
flist <- filterfun(diffBy(0.3))
filtered <- genefilter(rsPair, flist)
c
d <- dist(filtered)
plot(hclust(d), cex = 0.5)
plot(hclust(d, method = "average"), cex = 0.5)
rsRegion <- getRS(CNSeg(sList), by = "region", input = TRUE, XY = FALSE)
?genefilter
ls("package:genefilter")
?AUC
?rowpAUCs
?cv
?varFilter
?IQR
IQR(rivers)
RrowVars
rowVars
?rowVars
t <- rs(rsRegion)
dim(t)
head(colnames(t))
mads <- apply(t[, -c(1:3)], 1, mad)
mads <- apply(data.matrix(t[, -c(1:3)]), 1, mad)
mads <- apply(apply(t[, -c(1:3)], 2, as.numeric), 1, mad)
hist(mads)
table(mads >= 0.5)
table(mads >= 0.4)
hist(mads[mads < 0.5])
d <- dist(t(apply(t[mads >= 0.4, -c(1:3)], 2, as.numeric)))
dist
rs(rsRegion) <- rsRegion[mads >= 0.4, ]
rs(rsRegion) <- t[mads >= 0.4, ]
setGeneric("rs<-", function(object, value)
           standardGeneric("rs<-"))
setMethod("rs", "RS", 
          function(object){
              object@rs <- value; object))          
setGeneric("rs<-", function(object, value)
           standardGeneric("rs<-"))
setMethod("rs", "RS", 
          function(object){
              object@rs <- value; object})   
setGeneric("rs<-", function(object, value)
           standardGeneric("rs<-"))
setMethod("rs<-", "RS", 
          function(object){
              object@rs <- value; object})   
setMethod("rs<-", "RS", 
          function(object, value){
              object@rs <- value; object})  
 rs(rsRegion) <- t[mads >= 0.4, ]
d <- dist(rsRegion)
setGeneric("rs", function(object)
           standardGeneric("rs"))
setMethod("rs", "RS", 
          function(object) object@rs)
 d <- dist(rsRegion)
 d <- dist(rsRegion, method = "euclidean", diag = FALSE, upper = FALSE, p = 2)
hclust(d)
plot(hclust(d))
heatmap(rs(reRegion)[, -c(1:3)])
heatmap(rs(rsRegion)[, -c(1:3)])
heatmap(data.matrix(rs(rsRegion)[, -c(1:3)]))
heatmap(apply(rs(rsRegion)[, -c(1:3)]), 2, as.numeric)
?heatmap
heatmap(apply(rs(rsRegion)[, -c(1:3)]), 2, as.numeric))
heatmap(apply(rs(rsRegion)[, -c(1:3)], 2, as.numeric))
hc <- hclust(t(apply(rs(rsRegion)[, -c(1:3)], 2, as.numeric)))
dim(rs(rsRegion))
hc <- hclust(apply(rs(rsRegion)[, -c(1:3)], 2, as.numeric))
head(rs(rsRegion))
head(apply(rs(rsRegion)[, -c(1:3)], 2, as.numeric))
?hclust
hc <- hclust(d(apply(rs(rsRegion)[, -c(1:3)], 2, as.numeric)))
hc <- hclust(t(apply(rs(rsRegion)[, -c(1:3)], 2, as.numeric)))
hc <- hclust(dist(t(apply(rs(rsRegion)[, -c(1:3)], 2, as.numeric))))
hc <- hclust(stats:::dist(t(apply(rs(rsRegion)[, -c(1:3)], 2, as.numeric))))
plot(hc)
d <- dist(rsRegion)
unique(sList[, "ID"])
g <- rs(rsPair)[[1]]
head(g)
shortSList <- sList[sList[, "ID"] %in% unique(sList[, "ID"])[1:2], ]
unique(shortSList[, "ID"])
shortRS <- getRS(CNSeg(shortSList), by = "region", input = FALSE, XY = TRUE)
splited <- splite.data.frame(shortSList, factor(shortSList[, "chrom"]))
splited <- split.data.frame(shortSList, factor(shortSList[, "chrom"]))
splited[[1]]
shortRS <- getRS(CNSeg(shortSList), by = "region", input = FALSE, XY = TRUE)
head(rs(shortRS))
head(rs(shortRS), n = 10)
setwd("Z:/RPkgs/CNTools/man")
promptClass("RS")
promptClass("CNSeg")
promptMethods("getRS")
promptMethods("rs")
promptMethods("rs")
promptMethods("rs")
promptMethods("genefilter")
promptMethods("getRS")
promptMethods("dist")
promptMethods("cor")
plot(hc, cex = 0.3)
plot(hc, cex = 0.2)
plot(hc, cex = 0.2, main = "", xlab = "")
png("C:/Tasks/OV/clusterRegion.png", width = 500, height = 450)
plot(hc, cex = 0.2, main = "", xlab = "")
dev.off()
png("C:/Tasks/OV/clusterRegion.png", width = 400, height = 300)
plot(hc, cex = 0.2, main = "", xlab = "")
dev.off()
png("C:/Tasks/OV/clusterRegion.png", width = 400, height = 300)
par(mai = c(0.05, 0.9, 0.05, 0.05))
plot(hc, cex = 0.2, main = "", xlab = "")
dev.off()
ls()
dPair <- dist(filterPair)
filterPair
filegeredPair(rsPair, flist)
filegeredPair <- genefilter(rsPair, flist)
c
dPair <- dist(filteredPair)
dPair <- dist(filegeredPair)
hcPair <- hclust(dPair)
plot(hcPair)
plot(hcPair, cex = 0.2, main = "", xlab = "")
png("C:/Tasks/OV/clusterPair.png", width = 400, height = 300)
plot(hcPair, cex = 0.2, main = "", xlab = "")
dev.off()
png("C:/Tasks/OV/clusterPair.png", width = 400, height = 300)
par(mai = c(0.05, 0.9, 0.05, 0.05))
plot(hcPair, cex = 0.2, main = "", xlab = "")
dev.off()
ls()
load("C:/Tasks/CNClustTools/data/geneInfo.rda")
reByGene <- getRS(CNSeg(sList), by = "gene", input = TRUE, XY = FALSE)
t <- rs(reByGene)
madsGene <- apply(t[, -c(1:3)], 1, mad)
madsGene <- apply(apply(t[, -c(1:3)], 2, as.numeric), 1, mad)
madsGene <- apply(apply(t[, -c(1:3)], 2, as.numeric), 1, mad, na.rm = TRUE)
hist(madsGene)
hist(madsGene[madsGene < 0.5])
t <- t[madsGeme >= 0.4, ]
t <- t[madsGene >= 0.4, ]
dim(t)
rs(reByGene) <- t
dGene <- dist(reByGene)
dGene <- dist(t(t[, -c(1:3)]))
dGene <- stats:::dist(t(t[, -c(1:3)]))
hcGene <- hclust(dGene)
any(is.na(t))
tt <- rs(reByGene)
any(is.na(tt))
head(tt)
dGene <- stats:::dist(t(t[, -c(1:5)]))
hcGene <- hclust(dGene)
plot(hcGene)
plot(hcGene, main = "", xlab = "")
plot(hcGene, main = "", xlab = "", cex = 0.2)
png("C:/Tasks/OV/clusterGene.png", width = 400, height = 300)
par(mai = c(0.05, 0.9, 0.05, 0.05)
)
plot(hcGene, main = "", xlab = "", cex = 0.2)
dev.off()
